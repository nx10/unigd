[{"path":"https://nx10.github.io/unigd/articles/a00_installation.html","id":"system-requirements","dir":"Articles","previous_headings":"","what":"System requirements","title":"Installation","text":"libpng X11 required unix like systems (e.g. Linux, macOS). Cairo optional unix like systems enable PNG, PDF, EPS PS renderers. libtiff required unix like systems enable TIFF renderers.","code":""},{"path":"https://nx10.github.io/unigd/articles/a00_installation.html","id":"macos","dir":"Articles","previous_headings":"System requirements","what":"macOS","title":"Installation","text":"libpng missing install via: X11 missing error message include text: Install XQuartz. (see: https://github.com/r-lib/systemfonts/issues/17)","code":"brew install libpng unable to load shared object [...] systemfonts/libs/systemfonts.so [...]"},{"path":"https://nx10.github.io/unigd/articles/a00_installation.html","id":"linux","dir":"Articles","previous_headings":"System requirements","what":"Linux","title":"Installation","text":"source installation Linux, fontconfig freetype2 library required install systemfonts package, dependency unigd.","code":""},{"path":"https://nx10.github.io/unigd/articles/a00_installation.html","id":"debian-ubuntu-etc-","dir":"Articles","previous_headings":"System requirements > Linux","what":"Debian, Ubuntu, etc.","title":"Installation","text":"","code":"apt install libfontconfig1-dev"},{"path":"https://nx10.github.io/unigd/articles/a00_installation.html","id":"fedora-centos-rhel-etc-","dir":"Articles","previous_headings":"System requirements > Linux","what":"Fedora, CentOS, RHEL, etc.","title":"Installation","text":"","code":"dnf install fontconfig-devel"},{"path":"https://nx10.github.io/unigd/articles/b00_guide.html","id":"plot-rendering-in-base-r","dir":"Articles","previous_headings":"","what":"Plot rendering in base R","title":"Plotting with unigd","text":"Rendering plot base R done (1) starting graphics device, (2) calling plot functions subsequently (3) closing device: Note unfortunate contstraints: File format (png(), pdf(), svg(), …) Filepath (.e.: file=\"my_plot1.png\") Dimensions (.e.: width=600, height=400) …multiple formats. …multiple dimensions. easy way access plotting data without writing file first. Closing device dev.() must called every time. unigd solves issues employing different graphics device architecture.","code":"temp <- airquality$Temp                         # Fetch some data  png(file=\"my_plot1.png\", width=600, height=400) # (1) Start the 'png' device hist(temp, col=\"darkblue\")                      # (2) Plot a histogram dev.off()                                       # (3) Close the device"},{"path":"https://nx10.github.io/unigd/articles/b00_guide.html","id":"plot-rendering-with-unigd","dir":"Articles","previous_headings":"","what":"Plot rendering with unigd","title":"Plotting with unigd","text":"Let’s see render can created using unigd: Notice rendering explicit instruction plotting using unigd. way can also render plot multiple formats /dimensions: Starting closing device can cumbersome, especially plotting code aborts error leaves device open. reason unigd comes set functions called ugd_*_inline: Plotting way keeps create close device manually. Depending personal preference may also considered ‘readable’ code. can obtain full list included renderers ugd_renderers(). (’s growing every unigd update!) next section illustrate access render data directly without create file.","code":"library(unigd) temp <- airquality$Temp                              # Fetch some data  ugd()                                                # (1) Start the 'ugd' device hist(temp, col=\"darkblue\")                           # (2) Plot a histogram ugd_save(file=\"my_plot1.png\", width=600, height=400) # Render 600*400 PNG file dev.off()                                            # (3) Close the device # ... hist(temp, col=\"darkblue\") ugd_save(file=\"my_plot1.png\", width=600, height=400) # Render 600*400 PNG file ugd_save(file=\"my_plot2.pdf\", width=300, height=300) # Render 300*300 PDF file # ... library(unigd) temp <- airquality$Temp # Fetch some data  ugd_save_inline({   hist(temp, col=\"darkblue\") }, file=\"my_plot1.png\", width=600, height=400)"},{"path":"https://nx10.github.io/unigd/articles/b00_guide.html","id":"in-memory-render-access","dir":"Articles","previous_headings":"","what":"In-memory render access","title":"Plotting with unigd","text":"applications, might want access rendered data directly. Example use-cases might report generation, web services interactive applications. can likely think work-arounds issue, unigd feature certainly lower code complexity increase performance. Rendering -memory done simply calling ugd_save(...) instead ugd_render(...): course also inline function :","code":"temp <- airquality$Temp  ugd() hist(temp, col=\"darkblue\") my_svg <- ugd_render(as=\"svg\") dev.off()  cat(my_svg) # Print the SVG as a string temp <- airquality$Temp  my_svg <- ugd_render_inline({   hist(temp, col=\"darkblue\") }, as=\"svg\")  cat(my_svg) # Print the SVG as a string"},{"path":"https://nx10.github.io/unigd/articles/b00_guide.html","id":"more-unigd-features","dir":"Articles","previous_headings":"","what":"More unigd features","title":"Plotting with unigd","text":"unigd offers number features go beyond base R graphics devices.","code":""},{"path":"https://nx10.github.io/unigd/articles/b00_guide.html","id":"zoom","dir":"Articles","previous_headings":"More unigd features","what":"Zoom","title":"Plotting with unigd","text":"rendering function unigd offer zoom parameter. parameter can used increase (decrease) size objects inside plot (independently plot dimensions). example zoom=2 increase size objects 200%, zoom=0.5 decrease 50%.","code":"my_svg_1_0 <- ugd_render_inline({   hist(temp, col=\"darkblue\", main = \"Zoom 1.0\") }, as=\"png-base64\", width=300, height=300, zoom=1.0)  my_svg_1_5 <- ugd_render_inline({   hist(temp, col=\"darkblue\", main = \"Zoom 1.5\") }, as=\"png-base64\", width=300, height=300, zoom=1.5)  my_svg_0_5 <- ugd_render_inline({   hist(temp, col=\"darkblue\", main = \"Zoom 0.5\") }, as=\"png-base64\", width=300, height=300, zoom=0.5)  # (Output directly in this RMarkdown document) knitr::raw_html(paste0(sprintf(\"<img src=\\\"%s\\\" />\", c(my_svg_1_0, my_svg_1_5, my_svg_0_5))))"},{"path":"https://nx10.github.io/unigd/articles/b00_guide.html","id":"paging-by-index","dir":"Articles","previous_headings":"More unigd features","what":"Paging (by index)","title":"Plotting with unigd","text":"page parameter lets select plot history rendered. default set 0 use last created plot. Set number ≥ 1 select plot ’s index (oldest first). Use numbers ≤ 0 select plots newest-first: Note plots can deleted history way: Instead keeping track plot index, might change plots added removed, static plot IDs can obtained.","code":"ugd() for (i in 1:10) {   plot(1, main=paste0(\"Plot #\", i)) }  ugd_save(file=\"plot.png\", page = 3)  # Plot #3 ugd_save(file=\"plot.png\")            # Plot #10 ugd_save(file=\"plot.png\", page = -1) # Plot #9  dev.off() # ... ugd_remove()          # Remove last ugd_remove(page = -1) # Remove second-to-last ugd_clear()           # Remove all # ..."},{"path":"https://nx10.github.io/unigd/articles/b00_guide.html","id":"plot-ids","dir":"Articles","previous_headings":"More unigd features","what":"Plot IDs","title":"Plotting with unigd","text":"want render plot later point without keep track index, can obtain ID point ’s creation. following example extensively demonstrates can used: Note typical use-case much simpler, just getting last ID plot calling ugd_id() subsequently.","code":"ugd()  plot(rnorm(50))           # A  first_plot_id <- ugd_id() # Get last ID (A at this point)  hist(rnorm(50))           # B  plot(sin((1:100)/3))      # C  other_id <- ugd_id(-1)    # Get the second-to-last ID (B at this point)  hist(runif(100))          # D  ugd_remove(3)             # Remove 3rd plot (C)  first_again <- ugd_id(1)  # Get the first ID (A)  ugd_save(file=\"plot_1.png\", page = first_plot_id) ugd_save(file=\"plot_2.png\", page = other_id) ugd_save(file=\"plot_3.png\", page = first_again)  dev.off()"},{"path":"https://nx10.github.io/unigd/articles/b00_guide.html","id":"special-renderers","dir":"Articles","previous_headings":"More unigd features","what":"(Special) renderers","title":"Plotting with unigd","text":"unigd also ships number ‘special’ renderers. guide go much detail topic noteworthy mentions: text elements inside plot Linebreak seperated plain text format used e.g. ‘search’ plots Meta information plot Guaranteed render time O(1) regardless number objects Includes complexity (number draw calls clipping planes) JSON format Contains information unigd one plot JSON format","code":""},{"path":"https://nx10.github.io/unigd/articles/b00_guide.html","id":"performance-considerations","dir":"Articles","previous_headings":"","what":"Performance considerations","title":"Plotting with unigd","text":"unigd aims provide best performance case, considerations can make optimizing graphics rendering. point mentioned user applications readability prioritized performance , unless graphics rendering bottlenecking R script, can likely ignore section good conscience. optimizing rendering code, fundamental understand cases unigd needs call R graphics engine let plot re-drawn: Rendering done drawing. last drawn dimensions plot cached. can derive simple rules : Rendering plot different formats: Fast. Rendering plot different dimensions: Slow(er). means ordering rendering calls result faster execution: , unigd gives choice specifying render dimension plotting, can hint device creation time achieve best performance: dimensions omitted calling rendering functions, last known dimensions used rendering guaranteed fast: use ugd_*_inline functions also guaranteed fast. Note width height also interact zoom parameter. (.e.: Cached width = width / zoom).","code":"# SLOWER: ugd_save(file=\"my_plot1.png\", width=600, height=400) ugd_save(file=\"my_plot2.pdf\", width=300, height=300) # re-draw 1 ugd_save(file=\"my_plot3.pdf\", width=600, height=400) # re-draw 2  # FASTER: ugd_save(file=\"my_plot1.png\", width=600, height=400) ugd_save(file=\"my_plot3.pdf\", width=600, height=400) ugd_save(file=\"my_plot2.pdf\", width=300, height=300) # re-draw 1 # SLOWER: ugd() # default dimensions: 720 * 576 # ... ugd_save(file=\"my_plot1.png\", width=300, height=300) # re-draw  # FASTER: ugd(width=300, height=300) # ... ugd_save(file=\"my_plot1.png\", width=300, height=300) ugd_save(file=\"my_plot1.png\")"},{"path":"https://nx10.github.io/unigd/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Florian Rupprecht. Author, maintainer. Kun Ren. Contributor. Jeroen Ooms. Contributor. Hadley Wickham. Copyright holder.            Author included svglite code Lionel Henry. Copyright holder.            Author included svglite code Thomas Lin Pedersen. Copyright holder.            Author creator included svglite code T Jake Luciani. Copyright holder.            Author included svglite code Matthieu Decorde. Copyright holder.            Author included svglite code Vaudor Lise. Copyright holder.            Author included svglite code Tony Plate. Copyright holder.            Contributor included svglite code David Gohel. Copyright holder.            Contributor included svglite code Yixuan Qiu. Copyright holder.            Contributor included svglite code Håkon Malmedal. Copyright holder.            Contributor included svglite code RStudio. Copyright holder.            Copyright holder included svglite code Brett Robinson. Copyright holder.            Author included belle library Google. Copyright holder.            Copyright holder included material design icons Victor Zverovich. Copyright holder.            Author included fmt library","code":""},{"path":"https://nx10.github.io/unigd/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rupprecht F (2022). unigd: Universal graphics device. https://github.com/nx10/unigd, https://nx10.github.io/unigd/.","code":"@Manual{,   title = {unigd: Universal graphics device},   author = {Florian Rupprecht},   year = {2022},   note = {https://github.com/nx10/unigd, https://nx10.github.io/unigd/}, }"},{"path":"https://nx10.github.io/unigd/index.html","id":"unigd-","dir":"","previous_headings":"","what":"Universal graphics device","title":"Universal graphics device","text":"unified R graphics backend. Render R graphics fast easy many common file formats. package provides thread-safe interface power interactive graphics clients httpgd.","code":""},{"path":"https://nx10.github.io/unigd/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Universal graphics device","text":"Fast plotting Plot resizing history Render various image formats (SVG, PNG, PDF, EPS, …) -memory access rendered graphics Platform independent Stateless thread-safe C client API package developers","code":""},{"path":"https://nx10.github.io/unigd/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Universal graphics device","text":"can install development version unigd GitHub : See system requirements troubleshooting.","code":"# install.packages(\"remotes\") remotes::install_github(\"nx10/unigd\")"},{"path":"https://nx10.github.io/unigd/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Universal graphics device","text":"See guide details.","code":""},{"path":"https://nx10.github.io/unigd/index.html","id":"contributions-welcome","dir":"","previous_headings":"","what":"Contributions welcome!","title":"Universal graphics device","text":"unigd mostly written C++, contributions tests (R) documentatation also always welcome!","code":""},{"path":"https://nx10.github.io/unigd/index.html","id":"about--license","dir":"","previous_headings":"","what":"About & License","title":"Universal graphics device","text":"Depends cpp11 systemfonts. Much font handling SVG rendering code modified code excellent svglite package. project licensed GPL v2.0. includes parts svglite (GPL ≥ 2) fmt (MIT). Full copies license agreements used components included ./inst/licenses.","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd.html","id":null,"dir":"Reference","previous_headings":"","what":"Asynchronous HTTP server graphics device. — ugd","title":"Asynchronous HTTP server graphics device. — ugd","text":"function initializes unigd graphics device starts local webserver, allows access via HTTP WebSockets. link printed web client can accessed using browser.","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronous HTTP server graphics device. — ugd","text":"","code":"ugd(   width = getOption(\"unigd.width\", 720),   height = getOption(\"unigd.height\", 576),   bg = getOption(\"unigd.bg\", \"white\"),   pointsize = getOption(\"unigd.pointsize\", 12),   system_fonts = getOption(\"unigd.system_fonts\", list()),   user_fonts = getOption(\"unigd.user_fonts\", list()),   reset_par = getOption(\"unigd.reset_par\", FALSE) )"},{"path":"https://nx10.github.io/unigd/reference/ugd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronous HTTP server graphics device. — ugd","text":"width Graphics device width (pixels). height Graphics device height (pixels). bg Background color. pointsize Graphics device point size. system_fonts Named list font names aliased fonts installed system. unspecified, R default families sans, serif, mono symbol aliased family returned systemfonts::font_info(). user_fonts Named list fonts aliased font files provided user rather fonts properly installed system. aliases can fonts fontquiver package, strings containing path font file, list containing name file elements name indicating font alias SVG output file path font file. reset_par set TRUE, global graphics parameters saved device start reset every time ugd_clear() called (see graphics::par()).","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Asynchronous HTTP server graphics device. — ugd","text":"return value, called initialize graphics device.","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Asynchronous HTTP server graphics device. — ugd","text":"font settings descriptions adopted excellent 'svglite' package.","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asynchronous HTTP server graphics device. — ugd","text":"","code":"if (FALSE) {  ugd() # Initialize graphics device and start server ugd_browse() # Or copy the displayed link in the browser  # Plot something x <- seq(0, 3 * pi, by = 0.1) plot(x, sin(x), type = \"l\")  dev.off() # alternatively: ugd_close() }"},{"path":"https://nx10.github.io/unigd/reference/ugd_clear.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear all unigd plot pages. — ugd_clear","title":"Clear all unigd plot pages. — ugd_clear","text":"function work starting device ugd().","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_clear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear all unigd plot pages. — ugd_clear","text":"","code":"ugd_clear(which = dev.cur())"},{"path":"https://nx10.github.io/unigd/reference/ugd_clear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear all unigd plot pages. — ugd_clear","text":"device (ID).","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_clear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear all unigd plot pages. — ugd_clear","text":"Whether pages remove.","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_clear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear all unigd plot pages. — ugd_clear","text":"","code":"if (FALSE) {  ugd() plot(1, 1) hist(rnorm(100)) ugd_clear() hist(rnorm(100))  dev.off() }"},{"path":"https://nx10.github.io/unigd/reference/ugd_close.html","id":null,"dir":"Reference","previous_headings":"","what":"Close unigd device. — ugd_close","title":"Close unigd device. — ugd_close","text":"achieves effect grDevices::dev.(), close device unigd type.","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_close.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close unigd device. — ugd_close","text":"","code":"ugd_close(which = dev.cur(), all = FALSE)"},{"path":"https://nx10.github.io/unigd/reference/ugd_close.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close unigd device. — ugd_close","text":"device (ID). running unigd devices closed.","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_close.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Close unigd device. — ugd_close","text":"Number name new active device (specified device shut ).","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_close.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Close unigd device. — ugd_close","text":"","code":"if (FALSE) {  ugd() ugd_browse() # open browser hist(rnorm(100)) ugd_close() # Equvalent to dev.off()  ugd() ugd() ugd() ugd_close(all = TRUE) }"},{"path":"https://nx10.github.io/unigd/reference/ugd_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Query unigd plot IDs — ugd_id","title":"Query unigd plot IDs — ugd_id","text":"Query unigd graphics device static plot IDs. Available plot IDs starting index returned. limit specifies number plots. function work starting device ugd().","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query unigd plot IDs — ugd_id","text":"","code":"ugd_id(index = 0, limit = 1, which = dev.cur(), state = FALSE)"},{"path":"https://nx10.github.io/unigd/reference/ugd_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query unigd plot IDs — ugd_id","text":"index Plot index. set 0, last page selected. limit Limit number returned IDs. set value > 1 returned type list IDs. Set 0 . device (ID). state Include current device state returned result (see also: ugd_state()).","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query unigd plot IDs — ugd_id","text":"TODO","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query unigd plot IDs — ugd_id","text":"","code":"if (FALSE) {  ugd() plot.new() text(.5, .5, \"#1\") plot.new() text(.5, .5, \"#2\") plot.new() text(.5, .5, \"#3\") third <- ugd_id() second <- ugd_id(2) all <- ugd_id(1, limit = Inf) ugd_remove(1) ugd_plot(second)  dev.off() }"},{"path":"https://nx10.github.io/unigd/reference/ugd_info.html","id":null,"dir":"Reference","previous_headings":"","what":"unigd device information. — ugd_info","title":"unigd device information. — ugd_info","text":"Access general information unigd graphics device. function work starting device ugd().","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"unigd device information. — ugd_info","text":"","code":"ugd_info(which = dev.cur())"},{"path":"https://nx10.github.io/unigd/reference/ugd_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"unigd device information. — ugd_info","text":"device (ID).","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"unigd device information. — ugd_info","text":"List status variables following named items: $id: Server unique ID, $version: unigd library versions.","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"unigd device information. — ugd_info","text":"","code":"if (FALSE) {  ugd() ugd_info()  dev.off() }"},{"path":"https://nx10.github.io/unigd/reference/ugd_remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a unigd plot page. — ugd_remove","title":"Remove a unigd plot page. — ugd_remove","text":"function work starting device ugd().","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a unigd plot page. — ugd_remove","text":"","code":"ugd_remove(page = 0, which = dev.cur())"},{"path":"https://nx10.github.io/unigd/reference/ugd_remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a unigd plot page. — ugd_remove","text":"page Plot page remove. set 0, last page selected. Can set numeric plot index plot ID (see ugd_id()). device (ID).","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_remove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a unigd plot page. — ugd_remove","text":"Whether page existed (thereby successfully removed).","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_remove.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a unigd plot page. — ugd_remove","text":"","code":"if (FALSE) {  ugd() plot(1, 1) # page 1 hist(rnorm(100)) # page 2 ugd_remove(page = 1) # remove page 1  dev.off() }"},{"path":"https://nx10.github.io/unigd/reference/ugd_render.html","id":null,"dir":"Reference","previous_headings":"","what":"Render unigd plot and return it. — ugd_render","title":"Render unigd plot and return it. — ugd_render","text":"See ugd_save() saving rendered plots files. function work starting device ugd().","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_render.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render unigd plot and return it. — ugd_render","text":"","code":"ugd_render(   page = 0,   width = -1,   height = -1,   zoom = 1,   as = \"svg\",   which = dev.cur() )"},{"path":"https://nx10.github.io/unigd/reference/ugd_render.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render unigd plot and return it. — ugd_render","text":"page Plot page render. set 0, last page selected. Can set numeric plot index plot ID (see ugd_id()). width Width plot. set -1, last width selected. height Height plot. set -1, last height selected. zoom Zoom level. (example: 2 corresponds 200%, 0.5 50%.) Renderer. device (ID).","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_render.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render unigd plot and return it. — ugd_render","text":"Rendered plot. Text renderers return strings, binary renderers return byte arrays.","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_render.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render unigd plot and return it. — ugd_render","text":"","code":"if (FALSE) {  ugd() plot(1, 1) ugd_render(width = 600, height = 400, as = \"svg\")  dev.off() }"},{"path":"https://nx10.github.io/unigd/reference/ugd_render_inline.html","id":null,"dir":"Reference","previous_headings":"","what":"Inline plot rendering. — ugd_render_inline","title":"Inline plot rendering. — ugd_render_inline","text":"Convenience function quick inline plot rendering. similar ugd_render() plotting code specified inline unigd graphics device managed (created closed) automatically. Starting device ugd() therefore necessary.","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_render_inline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inline plot rendering. — ugd_render_inline","text":"","code":"ugd_render_inline(   code,   page = 0,   width = getOption(\"unigd.width\", 720),   height = getOption(\"unigd.height\", 576),   zoom = 1,   as = \"svg\",   ... )"},{"path":"https://nx10.github.io/unigd/reference/ugd_render_inline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inline plot rendering. — ugd_render_inline","text":"code Plotting code. See examples information. page Plot page render. set 0, last page selected. Can set numeric plot index plot ID (see ugd_id()). width Width plot. height Height plot. zoom Zoom level. (example: 2 corresponds 200%, 0.5 50%.) Renderer. ... Additional parameters passed ugd(...)","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_render_inline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inline plot rendering. — ugd_render_inline","text":"Rendered plot. Text renderers return strings, binary renderers return byte arrays.","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_render_inline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inline plot rendering. — ugd_render_inline","text":"","code":"if (FALSE) {  ugd_render_inline({   hist(rnorm(100)) }, as = \"svgz\")  s <- ugd_render_inline({   plot.new()   lines(c(0.5, 1, 0.5), c(0.5, 1, 1)) }) cat(s) }"},{"path":"https://nx10.github.io/unigd/reference/ugd_renderers.html","id":null,"dir":"Reference","previous_headings":"","what":"unigd device renderers. — ugd_renderers","title":"unigd device renderers. — ugd_renderers","text":"Get list available renderers. function work starting device ugd().","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_renderers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"unigd device renderers. — ugd_renderers","text":"","code":"ugd_renderers()"},{"path":"https://nx10.github.io/unigd/reference/ugd_renderers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"unigd device renderers. — ugd_renderers","text":"List renderers following named items: $id: Renderer ID, $mime: File mime type, $ext: File extension, $name: Human readable name, $type: Renderer type (currently either plot ), $bin: file binary blob text.","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_renderers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"unigd device renderers. — ugd_renderers","text":"","code":"ugd_renderers() #>            id                   mime   ext          name type  text #> 1        tiff             image/tiff .tiff          TIFF plot FALSE #> 2  png-base64             text/plain  .txt    Base64 PNG plot  TRUE #> 3         png              image/png  .png           PNG plot FALSE #> 4         eps application/postscript  .eps           EPS plot  TRUE #> 5       svgzp          image/svg+xml .svgz Portable SVGZ plot FALSE #> 6          ps application/postscript   .ps            PS plot  TRUE #> 7        meta       application/json .json          Meta data  TRUE #> 8     strings             text/plain  .txt       Strings data  TRUE #> 9         pdf        application/pdf  .pdf           PDF plot FALSE #> 10       tikz             text/plain  .tex          TikZ plot  TRUE #> 11       json       application/json .json          JSON plot  TRUE #> 12       svgp          image/svg+xml  .svg  Portable SVG plot  TRUE #> 13       svgz          image/svg+xml .svgz          SVGZ plot FALSE #> 14        svg          image/svg+xml  .svg           SVG plot  TRUE #>                                                        descr #> 1                           Tagged Image File Format (TIFF). #> 2            Base64 encoded Portable Network Graphics (PNG). #> 3                           Portable Network Graphics (PNG). #> 4                             Encapsulated PostScript (EPS). #> 5  Version of the SVG renderer that produces portable SVGZs. #> 6                                           PostScript (PS). #> 7                                     Plot meta information. #> 8                         List of strings contained in plot. #> 9                      Adobe Portable Document Format (PDF). #> 10                                          LaTeX TikZ code. #> 11                      Plot data serialized to JSON format. #> 12  Version of the SVG renderer that produces portable SVGs. #> 13               Compressed Scalable Vector Graphics (SVGZ). #> 14                           Scalable Vector Graphics (SVG)."},{"path":"https://nx10.github.io/unigd/reference/ugd_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Render unigd plot to a file. — ugd_save","title":"Render unigd plot to a file. — ugd_save","text":"See ugd_render() acessing plot data directly memory without saving file. function work starting device ugd().","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render unigd plot to a file. — ugd_save","text":"","code":"ugd_save(   file,   page = 0,   width = -1,   height = -1,   zoom = 1,   as = \"auto\",   which = dev.cur() )"},{"path":"https://nx10.github.io/unigd/reference/ugd_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render unigd plot to a file. — ugd_save","text":"file Filepath save plot. page Plot page render. set 0, last page selected. Can set numeric plot index plot ID (see ugd_id()). width Width plot. set -1, last width selected. height Height plot. set -1, last height selected. zoom Zoom level. (example: 2 corresponds 200%, 0.5 50%.) Renderer. set \"auto\" renderer inferred file extension. device (ID).","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_save.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render unigd plot to a file. — ugd_save","text":"Rendered SVG string.","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_save.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render unigd plot to a file. — ugd_save","text":"","code":"if (FALSE) {  ugd() plot(1, 1) ugd_save(file = tempfile(), width = 600, height = 400, as = \"png\")  dev.off() }"},{"path":"https://nx10.github.io/unigd/reference/ugd_save_inline.html","id":null,"dir":"Reference","previous_headings":"","what":"Inline plot rendering to a file. — ugd_save_inline","title":"Inline plot rendering to a file. — ugd_save_inline","text":"Convenience function quick inline plot rendering. similar ugd_save() plotting code specified inline unigd graphics device managed (created closed) automatically. Starting device ugd() therefore necessary.","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_save_inline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inline plot rendering to a file. — ugd_save_inline","text":"","code":"ugd_save_inline(   code,   file,   page = 0,   width = getOption(\"unigd.width\", 720),   height = getOption(\"unigd.height\", 576),   zoom = 1,   as = \"auto\",   ... )"},{"path":"https://nx10.github.io/unigd/reference/ugd_save_inline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inline plot rendering to a file. — ugd_save_inline","text":"code Plotting code. See examples information. file Filepath save plot. page Plot page render. set 0, last page selected. Can set numeric plot index plot ID (see ugd_id()). width Width plot. height Height plot. zoom Zoom level. (example: 2 corresponds 200%, 0.5 50%.) Renderer. ... Additional parameters passed ugd(...)","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_save_inline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inline plot rendering to a file. — ugd_save_inline","text":"","code":"if (FALSE) {  ugd_save_inline({   plot.new()   lines(c(0.5, 1, 0.5), c(0.5, 1, 1)) }, file = \"plot.svg\") }"},{"path":"https://nx10.github.io/unigd/reference/ugd_state.html","id":null,"dir":"Reference","previous_headings":"","what":"unigd device status. — ugd_state","title":"unigd device status. — ugd_state","text":"Access status information unigd graphics device. function work starting device ugd().","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"unigd device status. — ugd_state","text":"","code":"ugd_state(which = dev.cur())"},{"path":"https://nx10.github.io/unigd/reference/ugd_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"unigd device status. — ugd_state","text":"device (ID).","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"unigd device status. — ugd_state","text":"List status variables following named items: $hsize: Plot history size (many plots accessible), $upid: Update ID (changes device received new information), $active: device currently activated device.","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"unigd device status. — ugd_state","text":"","code":"if (FALSE) {  ugd() ugd_state() plot(1, 1) ugd_state()  dev.off() }"},{"path":"https://nx10.github.io/unigd/reference/ugd_test_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a test pattern that can be used to evaluate and compare graphics\ndevices. — ugd_test_pattern","title":"Plot a test pattern that can be used to evaluate and compare graphics\ndevices. — ugd_test_pattern","text":"Plot test pattern can used evaluate compare graphics devices.","code":""},{"path":"https://nx10.github.io/unigd/reference/ugd_test_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a test pattern that can be used to evaluate and compare graphics\ndevices. — ugd_test_pattern","text":"","code":"ugd_test_pattern()"},{"path":"https://nx10.github.io/unigd/reference/ugd_test_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a test pattern that can be used to evaluate and compare graphics\ndevices. — ugd_test_pattern","text":"","code":"if (FALSE) {  ugd_test_pattern() }"},{"path":"https://nx10.github.io/unigd/reference/unigd-package.html","id":null,"dir":"Reference","previous_headings":"","what":"unigd: Universal graphics device — unigd-package","title":"unigd: Universal graphics device — unigd-package","text":"Universal graphics device","code":""},{"path":"https://nx10.github.io/unigd/news/index.html","id":"unigd-0109000","dir":"Changelog","previous_headings":"","what":"unigd 0.1.0.9000","title":"unigd 0.1.0.9000","text":"Split graphics rendering R interface ‘httpgd’. Large refactoring rewrite. Add async C client API. Add custom inter process communication layer. Add TIFF renderer. Add Base64 PNG renderer. Fix crash querying capabilities R 4.2. Improve testing. Many small fixes improvements.","code":""}]
